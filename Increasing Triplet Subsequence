Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

Return true if there exists i, j, k
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Note: Your algorithm should run in O(n) time complexity and O(1) space complexity.

Example 1:

Input: [1,2,3,4,5]
Output: true

\CODE:

import math
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        big,small=math.inf,math.inf
        for i in range(len(nums)):
            if nums[i]<=small:
                small=nums[i]
            elif nums[i]<=big:
                big=nums[i]
            else:
                return True
        return False
