Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.


CODE:

class Solution:
    def countSquares(self, m: List[List[int]]) -> int:
        count=0
        res=[[0]*(len(m[0])+1) for i in range(len(m)+1)]
        for i in range(1,len(m)+1):
            for j in range(1,len(m[0])+1):
                if(m[i-1][j-1]==1):
                    res[i][j]=1+min(res[i-1][j-1],res[i-1][j],res[i][j-1])
                    count+=res[i][j]
        return count
                
