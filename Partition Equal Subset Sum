Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].

CODE:



class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        sm=sum(nums)
        if not sm%2==0:
            return False
        sm=sm//2
        n=len(nums)
        dp=[[False for j in range(sm+1)] for i in range(n+1)]
        for i in range(n+1):
            dp[i][0]=True
        for i in range(n+1):
            for j in range(sm+1):
                if nums[i-1]>j:
                    dp[i][j]=dp[i-1][j]
                else:
                    dp[i][j]=dp[i-1][j-nums[i-1]] or dp[i-1][j]
        return dp[n][sm]
