Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

CODE:

from collections import Counter
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        if(len(s)<len(p)):
            return []
        res=[]
        pcount=Counter(p)
        scount=Counter()
        for i in range(len(s)):
            scount[s[i]]+=1
            if(i>=len(p)):
                if(scount[s[i-len(p)]]==1):
                    del scount[s[i-len(p)]]
                else:
                    scount[s[i-len(p)]]-=1
            if(pcount==scount):
                res.append(i-len(p)+1)
        return res
